Mean_Age  = mean(age, na.rm = TRUE),
Median_Age= median(age, na.rm = TRUE),
SD_Age    = sd(age, na.rm = TRUE),
Min_Age   = min(age, na.rm = TRUE),
Max_Age   = max(age, na.rm = TRUE)
)
# 4) Age distribution histogram by sex, with English labels and a caption
mrngo_data_demography %>%
ggplot(aes(x = age, fill = sex)) +
geom_histogram(binwidth = 1, position = "dodge", color = "black") +
labs(
title   = "Age Distribution by Sex",
x       = "Age (years)",
y       = "Number of Participants",
caption = "Figure: Histogram of participant ages, separated by sex"
) +
theme_minimal()
# 5) Create age groups (6–8, 9–11, 12+) and summarize counts by group and sex
mrngo_data_demography2 <- mrngo_data_demography %>%
mutate(
age_group = case_when(
age <= 6            ~ "6",
age <= 7           ~ "7",
age <= 8                ~ "8",
age <= 9                ~ "9"
)
)
mrngo_data_demography2 %>%
count(age_group, sex) %>%
tidyr::pivot_wider(
names_from   = sex,
values_from  = n,
values_fill  = 0
)
mrngo_data_clened_metrics %>%
# keep only distinguishing features
filter(Disting == "D") %>%
# count how many distinct features per concept
distinct(concept, feature, .keep_all = TRUE) %>%
count(concept, name = "n_dist_feats") %>%
# take the top 10
arrange(desc(n_dist_feats)) %>%
slice_head(n = 10) %>%
# make sure bars are ordered descending
ggplot(aes(x = reorder(concept, n_dist_feats), y = n_dist_feats)) +
geom_col(colour = "white", fill = "#ccb3ff") +
custom_theme +
labs(
x = NULL,
y = NULL
) +
# rotate x labels so they fit
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
mrngo_data_cleaned_metrics %>%
# keep only distinguishing features
filter(Disting == "D") %>%
# count how many distinct features per concept
distinct(concept, feature, .keep_all = TRUE) %>%
count(concept, name = "n_dist_feats") %>%
# take the top 10
arrange(desc(n_dist_feats)) %>%
slice_head(n = 10) %>%
# make sure bars are ordered descending
ggplot(aes(x = reorder(concept, n_dist_feats), y = n_dist_feats)) +
geom_col(colour = "white", fill = "#ccb3ff") +
custom_theme +
labs(
x = NULL,
y = NULL
) +
# rotate x labels so they fit
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
richness_plot = mrngo_data_cleaned_metrics_richness %>%
# 1. get unique concept–S_hat pairs and sort descending
distinct(concept, S_hat) %>%
arrange(desc(S_hat)) %>%
# 2. take top 5 and bottom 5
slice(c(1:5, (n() - 4):n())) %>%
# 3. flag top vs bottom
mutate(
group = rep(c("top", "bottom"), each = 5),
# reorder factor so bars go from low to high in the flipped plot
concept = fct_reorder(concept, S_hat)
) %>%
# 4. plot, mapping fill to the group
ggplot(aes(x = concept, y = S_hat, fill = group)) +
geom_col(colour = "white") +
scale_fill_manual(
values = c(
top    = "#ccb3ff",  # your original lilac
bottom = "#8a2bcf"   # a darker hue of lilac
)
) +
coord_flip() +
custom_theme +
labs(
title = NULL,
x     = NULL,
y     = NULL
) +
theme(
legend.position = "none"
)
show(richness_plot)
ggsave(
filename = "../figures/feature_richness_count.png",
plot     = richness_plot,
width    = 9,
height   = 6,
units    = "in",
dpi      = 300
)
mrngo_data_cleaned_metrics %>%
# keep only distinguishing features
filter(Disting == "D") %>%
# count how many distinct features per concept
distinct(concept, feature, .keep_all = TRUE) %>%
count(concept, name = "n_dist_feats") %>%
# take the top 10
arrange(desc(n_dist_feats)) %>%
slice_head(n = 10) %>%
# make sure bars are ordered descending
ggplot(aes(x = reorder(concept, n_dist_feats), y = n_dist_feats)) +
geom_col(colour = "white", fill = "#ccb3ff") +
custom_theme +
labs(
x = NULL,
y = NULL
) +
# rotate x labels so they fit
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
richness_plot = mrngo_data_cleaned_metrics_richness %>%
# 1) get unique pairs and sort descending
distinct(concept, S_hat) %>%
arrange(desc(S_hat)) %>%
# 2) slice out top-5 & bottom-5
slice(c(1:5, (n() - 4):n())) %>%
# 3) flag for coloring and reorder factor
mutate(
group   = rep(c("top", "bottom"), each = 5),
concept = fct_reorder(concept, S_hat)
) %>%
# 4) plot
ggplot(aes(x = concept, y = S_hat, fill = group)) +
geom_col(colour = "white") +
# 5) add white labels centered inside each bar
geom_text(aes(label = S_hat),
position = position_stack(vjust = 0.5),
color    = "white",
size     = 3) +
# 6) custom fill scale
scale_fill_manual(
values = c(
top    = "#ccb3ff",  # light lilac
bottom = "#8a2bcf"   # darker lilac
)
) +
coord_flip() +
custom_theme +
labs(title = NULL, x = NULL, y = NULL) +
theme(legend.position = "none")
show(richness_plot)
ggsave(
filename = "../figures/feature_richness_count.png",
plot     = richness_plot,
width    = 9,
height   = 6,
units    = "in",
dpi      = 300
)
mrngo_data_cleaned_metrics %>%
# keep only distinguishing features
filter(Disting == "D") %>%
# count how many distinct features per concept
distinct(concept, feature, .keep_all = TRUE) %>%
count(concept, name = "n_dist_feats") %>%
# take the top 10
arrange(desc(n_dist_feats)) %>%
slice_head(n = 10) %>%
# make sure bars are ordered descending
ggplot(aes(x = reorder(concept, n_dist_feats), y = n_dist_feats)) +
geom_col(colour = "white", fill = "#ccb3ff") +
custom_theme +
labs(
x = NULL,
y = NULL
) +
# rotate x labels so they fit
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
richness_plot = mrngo_data_cleaned_metrics_richness %>%
distinct(concept, S_hat) %>%
arrange(desc(S_hat)) %>%
slice(c(1:5, (n() - 4):n())) %>%
mutate(
group   = rep(c("top", "bottom"), each = 5),
concept = fct_reorder(concept, S_hat)
) %>%
ggplot(aes(x = concept, y = S_hat, fill = group)) +
geom_col(colour = "white") +
geom_text(
aes(label = round(S_hat)),              # round to whole number
position = position_stack(vjust = 0.5),
color    = "white",
size     = 4                             # slightly bigger
) +
scale_fill_manual(
values = c(
top    = "#ccb3ff",
bottom = "#8a2bcf"
)
) +
coord_flip() +
custom_theme +
labs(title = NULL, x = NULL, y = NULL) +
theme(legend.position = "none")
show(richness_plot)
ggsave(
filename = "../figures/feature_richness_count.png",
plot     = richness_plot,
width    = 9,
height   = 6,
units    = "in",
dpi      = 300
)
mrngo_data_cleaned_metrics %>%
# keep only distinguishing features
filter(Disting == "D") %>%
# count how many distinct features per concept
distinct(concept, feature, .keep_all = TRUE) %>%
count(concept, name = "n_dist_feats") %>%
# take the top 10
arrange(desc(n_dist_feats)) %>%
slice_head(n = 10) %>%
# make sure bars are ordered descending
ggplot(aes(x = reorder(concept, n_dist_feats), y = n_dist_feats)) +
geom_col(colour = "white", fill = "#ccb3ff") +
custom_theme +
labs(
x = NULL,
y = NULL
) +
# rotate x labels so they fit
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
richness_plot = mrngo_data_cleaned_metrics_richness %>%
distinct(concept, S_hat) %>%
arrange(desc(S_hat)) %>%
slice(c(1:5, (n() - 4):n())) %>%
mutate(
group   = rep(c("top", "bottom"), each = 5),
concept = fct_reorder(concept, S_hat)
) %>%
ggplot(aes(x = concept, y = S_hat, fill = group)) +
geom_col(colour = "white") +
geom_text(
aes(label = round(S_hat)),              # round to whole number
position = position_stack(vjust = 1),
color    = "white",
size     = 4                             # slightly bigger
) +
scale_fill_manual(
values = c(
top    = "#ccb3ff",
bottom = "#8a2bcf"
)
) +
coord_flip() +
custom_theme +
labs(title = NULL, x = NULL, y = NULL) +
theme(legend.position = "none")
show(richness_plot)
ggsave(
filename = "../figures/feature_richness_count.png",
plot     = richness_plot,
width    = 9,
height   = 6,
units    = "in",
dpi      = 300
)
mrngo_data_cleaned_metrics %>%
# keep only distinguishing features
filter(Disting == "D") %>%
# count how many distinct features per concept
distinct(concept, feature, .keep_all = TRUE) %>%
count(concept, name = "n_dist_feats") %>%
# take the top 10
arrange(desc(n_dist_feats)) %>%
slice_head(n = 10) %>%
# make sure bars are ordered descending
ggplot(aes(x = reorder(concept, n_dist_feats), y = n_dist_feats)) +
geom_col(colour = "white", fill = "#ccb3ff") +
custom_theme +
labs(
x = NULL,
y = NULL
) +
# rotate x labels so they fit
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
richness_plot = mrngo_data_cleaned_metrics_richness %>%
distinct(concept, S_hat) %>%
arrange(desc(S_hat)) %>%
slice(c(1:5, (n() - 4):n())) %>%
mutate(
group   = rep(c("top", "bottom"), each = 5),
concept = fct_reorder(concept, S_hat)
) %>%
ggplot(aes(x = concept, y = S_hat, fill = group)) +
geom_col(colour = "white") +
geom_text(
aes(label = round(S_hat)),              # round to whole number
position = position_stack(vjust = 0.8),
color    = "white",
size     = 4                             # slightly bigger
) +
scale_fill_manual(
values = c(
top    = "#ccb3ff",
bottom = "#8a2bcf"
)
) +
coord_flip() +
custom_theme +
labs(title = NULL, x = NULL, y = NULL) +
theme(legend.position = "none")
show(richness_plot)
ggsave(
filename = "../figures/feature_richness_count.png",
plot     = richness_plot,
width    = 9,
height   = 6,
units    = "in",
dpi      = 300
)
mrngo_data_cleaned_metrics %>%
# keep only distinguishing features
filter(Disting == "D") %>%
# count how many distinct features per concept
distinct(concept, feature, .keep_all = TRUE) %>%
count(concept, name = "n_dist_feats") %>%
# take the top 10
arrange(desc(n_dist_feats)) %>%
slice_head(n = 10) %>%
# make sure bars are ordered descending
ggplot(aes(x = reorder(concept, n_dist_feats), y = n_dist_feats)) +
geom_col(colour = "white", fill = "#ccb3ff") +
custom_theme +
labs(
x = NULL,
y = NULL
) +
# rotate x labels so they fit
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
richness_plot = mrngo_data_cleaned_metrics_richness %>%
distinct(concept, S_hat) %>%
arrange(desc(S_hat)) %>%
slice(c(1:5, (n() - 4):n())) %>%
mutate(
group   = rep(c("top", "bottom"), each = 5),
concept = fct_reorder(concept, S_hat)
) %>%
ggplot(aes(x = concept, y = S_hat, fill = group)) +
geom_col(colour = "white") +
geom_text(
aes(label = round(S_hat)),              # round to whole number
position = position_stack(vjust = 0.9),
color    = "white",
size     = 4                             # slightly bigger
) +
scale_fill_manual(
values = c(
top    = "#ccb3ff",
bottom = "#8a2bcf"
)
) +
coord_flip() +
custom_theme +
labs(title = NULL, x = NULL, y = NULL) +
theme(legend.position = "none")
show(richness_plot)
ggsave(
filename = "../figures/feature_richness_count.png",
plot     = richness_plot,
width    = 9,
height   = 6,
units    = "in",
dpi      = 300
)
mrngo_data_cleaned_metrics %>%
# keep only distinguishing features
filter(Disting == "D") %>%
# count how many distinct features per concept
distinct(concept, feature, .keep_all = TRUE) %>%
count(concept, name = "n_dist_feats") %>%
# take the top 10
arrange(desc(n_dist_feats)) %>%
slice_head(n = 10) %>%
# make sure bars are ordered descending
ggplot(aes(x = reorder(concept, n_dist_feats), y = n_dist_feats)) +
geom_col(colour = "white", fill = "#ccb3ff") +
custom_theme +
labs(
x = NULL,
y = NULL
) +
# rotate x labels so they fit
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
richness_plot = mrngo_data_cleaned_metrics_richness %>%
distinct(concept, S_hat) %>%
arrange(desc(S_hat)) %>%
slice(c(1:5, (n() - 4):n())) %>%
mutate(
group   = rep(c("top", "bottom"), each = 5),
concept = fct_reorder(concept, S_hat)
) %>%
ggplot(aes(x = concept, y = S_hat, fill = group)) +
geom_col(colour = "white") +
geom_text(
aes(label = round(S_hat)),              # round to whole number
position = position_stack(vjust = 0.9),
color    = "white",
size     = 4                             # slightly bigger
) +
scale_fill_manual(
values = c(
top    = "#8a2bcf",
bottom = "#ccb3ff"
)
) +
coord_flip() +
custom_theme +
labs(title = NULL, x = NULL, y = NULL) +
theme(legend.position = "none")
show(richness_plot)
ggsave(
filename = "../figures/feature_richness_count.png",
plot     = richness_plot,
width    = 9,
height   = 6,
units    = "in",
dpi      = 300
)
mrngo_data_cleaned_metrics %>%
# keep only distinguishing features
filter(Disting == "D") %>%
# count how many distinct features per concept
distinct(concept, feature, .keep_all = TRUE) %>%
count(concept, name = "n_dist_feats") %>%
# take the top 10
arrange(desc(n_dist_feats)) %>%
slice_head(n = 10) %>%
# make sure bars are ordered descending
ggplot(aes(x = reorder(concept, n_dist_feats), y = n_dist_feats)) +
geom_col(colour = "white", fill = "#ccb3ff") +
custom_theme +
labs(
x = NULL,
y = NULL
) +
# rotate x labels so they fit
theme(
axis.text.x = element_text(angle = 45, hjust = 1)
)
richness_plot = mrngo_data_cleaned_metrics_richness %>%
distinct(concept, S_hat) %>%
arrange(desc(S_hat)) %>%
slice(c(1:5, (n() - 4):n())) %>%
mutate(
group   = rep(c("top", "bottom"), each = 5),
concept = fct_reorder(concept, S_hat)
) %>%
ggplot(aes(x = concept, y = S_hat, fill = group)) +
geom_col(colour = "white") +
geom_text(
aes(label = round(S_hat)),              # round to whole number
position = position_stack(vjust = 0.9),
color    = "white",
size     = 4                             # slightly bigger
) +
scale_fill_manual(
values = c(
top    = "#9B7DDC",
bottom = "#ccb3ff"
)
) +
coord_flip() +
custom_theme +
labs(title = NULL, x = NULL, y = NULL) +
theme(legend.position = "none")
show(richness_plot)
ggsave(
filename = "../figures/feature_richness_count.png",
plot     = richness_plot,
width    = 9,
height   = 6,
units    = "in",
dpi      = 300
)

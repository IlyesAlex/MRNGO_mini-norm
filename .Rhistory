plot     = combined_plot,
width    = 12,
height   = 7,
units    = "in",
dpi      = 300
)
library(dplyr)
library(ggplot2)
library(ggpubr)
# 1) compute avg features-per-concept by ID
id_avg <- mrngo_data_cleaned %>%
distinct(ID, concept, feature) %>%     # one row per ID–concept–feature
count(ID, concept, name = "n_feats") %>%  # how many features each ID gave for each concept
group_by(ID) %>%
summarise(avg_feats = mean(n_feats, na.rm = TRUE)) %>%
ungroup()
# 2) pull out each ID’s age & sex (assumed unique per ID)
demog <- mrngo_data_cleaned %>%
select(ID, age, sex) %>%
distinct(ID, .keep_all = TRUE)
id_demo <- left_join(id_avg, demog, by = "ID")
# 3) fit the model (optional, for stats)
mod <- lm(avg_feats ~ age * sex, data = id_demo)
summary(mod)
# you could extract the p-value of the interaction like:
# anova(mod)
# 4) plot it
p_age_sex <- ggplot(id_demo, aes(x = age, y = avg_feats, color = sex)) +
geom_point(size = 3, alpha = 0.7) +
geom_smooth(method = "lm", formula = y ~ x, se = TRUE) +
# add separate Pearson r / p-values per sex:
stat_cor(aes(label = paste0("r = ", ..r.., ", p = ", ..p..)),
method = "pearson",
label.x = -Inf, label.y = Inf,
hjust = c(-0.1, 1.1), vjust = c(1.5, 2.5),
size = 5) +
labs(
x     = "Age",
y     = "Avg. features per concept",
color = "Sex",
title = "Age × Sex effects on feature‐production"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "top"
)
print(p_age_sex)
library(dplyr)
library(ggplot2)
library(ggpubr)
# 1) compute avg features-per-concept by ID
id_avg <- mrngo_data_cleaned %>%
distinct(ID, concept, feature) %>%     # one row per ID–concept–feature
count(ID, concept, name = "n_feats") %>%  # how many features each ID gave for each concept
group_by(ID) %>%
summarise(avg_feats = mean(n_feats, na.rm = TRUE)) %>%
ungroup()
# 2) pull out each ID’s age & sex (assumed unique per ID)
demog <- mrngo_data_cleaned %>%
select(ID, age, sex) %>%
distinct(ID, .keep_all = TRUE)
id_demo <- left_join(id_avg, demog, by = "ID")
# 3) fit the model (optional, for stats)
mod <- lm(avg_feats ~ age * sex, data = id_demo)
summary(mod)
# you could extract the p-value of the interaction like:
# anova(mod)
# 4) plot it
p_age_sex <- ggplot(id_demo, aes(x = age, y = avg_feats, color = sex)) +
geom_point(size = 3, alpha = 0.7) +
geom_smooth(method = "lm", formula = y ~ x, se = TRUE) +
# separate stat_cor for each sex, plain text labels
stat_cor(
aes(label = paste0(
"r = ",  round(..r..,2),
"\np = ", signif(..p..,2)
)),
method  = "pearson",
parse   = FALSE,
label.x = c( min(id_demo$age) + 1, min(id_demo$age) + 1 ),  # one x for each sex
label.y = c( max(id_demo$avg_feats) + 0.5, max(id_demo$avg_feats) + 1.5 ),
size    = 5,
show.legend = FALSE
) +
labs(
x     = "Age",
y     = "Avg. features per concept",
color = "Sex",
title = "Age × Sex Effects on Feature Production"
) +
theme_minimal(base_size = 14) +
theme(
legend.position  = "top",
axis.title       = element_text(size = 16),
axis.text        = element_text(size = 14),
plot.title       = element_text(size = 18, face = "bold"),
legend.title     = element_text(size = 14),
legend.text      = element_text(size = 12)
)
print(p_age_sex)
library(dplyr)
library(ggplot2)
library(ggpubr)
# 1) compute avg features-per-concept by ID
id_avg <- mrngo_data_cleaned %>%
distinct(ID, concept, feature) %>%     # one row per ID–concept–feature
count(ID, concept, name = "n_feats") %>%  # how many features each ID gave for each concept
group_by(ID) %>%
summarise(avg_feats = mean(n_feats, na.rm = TRUE)) %>%
ungroup()
# 2) pull out each ID’s age & sex (assumed unique per ID)
demog <- mrngo_data_cleaned %>%
select(ID, age, sex) %>%
distinct(ID, .keep_all = TRUE)
id_demo <- left_join(id_avg, demog, by = "ID")
id_demo_clean <- id_demo %>%
mutate(
age_f = factor(age, levels = sort(unique(age)))
)
# 1) BOXPLOT + jitter
p1 <- ggplot(id_demo_clean, aes(x = age_f, y = avg_feats, fill = sex)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.6) +
geom_jitter(
aes(color = sex),
position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
alpha = 0.6, size = 2, show.legend = FALSE
) +
scale_fill_manual(values = c(female = "#E69F00", male = "#56B4E9")) +
labs(
x    = "Age",
y    = "Avg. features per concept",
fill = "Sex",
title = "Feature‐Production by Age & Sex"
) +
theme_minimal(base_size = 14)
# 2) VIOLIN plot
p2 <- ggplot(id_demo_clean, aes(x = age_f, y = avg_feats, fill = sex)) +
geom_violin(
position = position_dodge(width = 0.8),
width = 0.8, alpha = 0.6
) +
stat_summary(
fun = mean, geom = "point",
position = position_dodge(width = 0.8),
shape = 23, size = 3, fill = "white"
) +
scale_fill_manual(values = c(female = "#E69F00", male = "#56B4E9")) +
labs(
x    = "Age",
y    = "Avg. features per concept",
fill = "Sex",
title = "Feature‐Production by Age & Sex"
) +
theme_minimal(base_size = 14)
# 3) BAR + error‐bars (mean ± SE)
p3 <- ggplot(id_demo_clean, aes(x = age_f, y = avg_feats, fill = sex)) +
stat_summary(
fun = mean, geom = "col",
position = position_dodge(width = 0.8),
width = 0.6
) +
stat_summary(
fun.data = mean_se, geom = "errorbar",
position = position_dodge(width = 0.8),
width = 0.2
) +
scale_fill_manual(values = c(female = "#E69F00", male = "#56B4E9")) +
labs(
x    = "Age",
y    = "Avg. features per concept",
fill = "Sex",
title = "Feature‐Production by Age & Sex"
) +
theme_minimal(base_size = 14)
# draw whichever you like:
print(p1)
# or
print(p2)
print(p3)
print(anova_res)
# 1) Fit the ANOVA model
anova_mod <- aov(avg_feats ~ age * sex, data = id_demo)
# 2) Get the ANOVA table
anova_res <- summary(anova_mod)
print(anova_res)
print(p1)
# Plot 1: Richness vs. Word Frequency
p1 <- cmpl %>%
filter(S_hat != max(S_hat, na.rm = TRUE)) %>%
filter(S_hat != max(S_hat, na.rm = TRUE)) %>%
ggplot(aes(x = word_frequency, y = S_hat)) +
geom_point(size = 2, alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "steelblue") +
stat_cor(method = "pearson", label.x = Inf, label.y = Inf,
hjust = 1.1, vjust = 1.5, size = 7) +
labs(
x     = "Word Frequency",
y     = bquote("Semantic richness ("~hat(S)~")"),
title = NULL
)
# Plot 2: Richness vs. Age-of‐Acquisition
p2 <- cmpl %>%
ggplot(aes(x = aoa_any, y = S_hat)) +
geom_point(size = 2, alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "coral") +
stat_cor(method = "pearson", label.x = Inf, label.y = Inf,
hjust = 1.1, vjust = 1.5, size = 7) +
labs(
x     = "Age of Acquisition (AoA)",
y     = NULL,
title = NULL
)
# Combine side by side
combined_plot <- p1 + p2 +
plot_layout(ncol = 2) &
theme(
plot.title   = NULL,
axis.text    = element_text(color = "gray30"),
axis.title   = element_text(face = "bold")
) +
custom_theme
# Print it (and you can ggsave at high‐res right after)
print(combined_plot)
# Print it (and you can ggsave at high‐res right after)
print(combined_plot)
print(p1)
print(p2)
# Plot 1: Richness vs. Word Frequency
p1 <- cmpl %>%
filter(S_hat != max(S_hat, na.rm = TRUE)) %>%
filter(S_hat != max(S_hat, na.rm = TRUE)) %>%
ggplot(aes(x = word_frequency, y = S_hat)) +
geom_point(size = 2, alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "steelblue") +
stat_cor(method = "pearson", label.x = Inf, label.y = Inf,
hjust = 1.1, vjust = 1.5, size = 7) +
labs(
x     = "Word Frequency",
y     = bquote("Semantic richness ("~hat(S)~")"),
title = NULL
) +
custom_theme
# Plot 2: Richness vs. Age-of‐Acquisition
p2 <- cmpl %>%
ggplot(aes(x = aoa_any, y = S_hat)) +
geom_point(size = 2, alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "coral") +
stat_cor(method = "pearson", label.x = Inf, label.y = Inf,
hjust = 1.1, vjust = 1.5, size = 7) +
labs(
x     = "Age of Acquisition (AoA)",
y     = NULL,
title = NULL
) +
custom_theme
print(p1)
print(p1)
print(p2)
library(dplyr)
library(ggplot2)
library(ggpubr)
# 1) compute avg features-per-concept by ID
id_avg <- mrngo_data_cleaned %>%
distinct(ID, concept, feature) %>%     # one row per ID–concept–feature
count(ID, concept, name = "n_feats") %>%  # how many features each ID gave for each concept
group_by(ID) %>%
summarise(avg_feats = mean(n_feats, na.rm = TRUE)) %>%
ungroup()
# 2) pull out each ID’s age & sex (assumed unique per ID)
demog <- mrngo_data_cleaned %>%
select(ID, age, sex) %>%
distinct(ID, .keep_all = TRUE)
id_demo <- left_join(id_avg, demog, by = "ID")
id_demo_clean <- id_demo %>%
mutate(
age_f = factor(age, levels = sort(unique(age)))
)
# 3) BAR + error‐bars (mean ± SE)
p3 <- ggplot(id_demo_clean, aes(x = age_f, y = avg_feats, fill = sex)) +
stat_summary(
fun = mean, geom = "col",
position = position_dodge(width = 0.8),
width = 0.6
) +
stat_summary(
fun.data = mean_se, geom = "errorbar",
position = position_dodge(width = 0.8),
width = 0.2
) +
scale_fill_manual(values = c(female = "#F17C5D", male = "#5DA8D3")) +
labs(
x    = "Age",
y    = "Avg. features per concept",
fill = "Sex",
title = NULL
) +
custom_theme
# draw whichever you like:
print(p3)
ggsave(
filename = "../figures/age_sex_difference.png",
plot     = combined_plot,
width    = 10,
height   = 6,
units    = "in",
dpi      = 300
)
library(dplyr)
library(ggplot2)
library(ggpubr)
# 1) compute avg features-per-concept by ID
id_avg <- mrngo_data_cleaned %>%
distinct(ID, concept, feature) %>%     # one row per ID–concept–feature
count(ID, concept, name = "n_feats") %>%  # how many features each ID gave for each concept
group_by(ID) %>%
summarise(avg_feats = mean(n_feats, na.rm = TRUE)) %>%
ungroup()
# 2) pull out each ID’s age & sex (assumed unique per ID)
demog <- mrngo_data_cleaned %>%
select(ID, age, sex) %>%
distinct(ID, .keep_all = TRUE)
id_demo <- left_join(id_avg, demog, by = "ID")
id_demo_clean <- id_demo %>%
mutate(
age_f = factor(age, levels = sort(unique(age)))
)
# 3) BAR + error‐bars (mean ± SE)
p3 <- ggplot(id_demo_clean, aes(x = age_f, y = avg_feats, fill = sex)) +
stat_summary(
fun = mean, geom = "col",
position = position_dodge(width = 0.8),
width = 0.6
) +
stat_summary(
fun.data = mean_se, geom = "errorbar",
position = position_dodge(width = 0.8),
width = 0.2
) +
scale_fill_manual(values = c(female = "#F17C5D", male = "#5DA8D3")) +
labs(
x    = "Age",
y    = "Avg. features per concept",
fill = "Sex",
title = NULL
) +
custom_theme
# draw whichever you like:
print(p3)
ggsave(
filename = "../figures/age_sex_difference.png",
plot     = p3,
width    = 10,
height   = 6,
units    = "in",
dpi      = 300
)
print(p1)
library(ggpubr)
library(patchwork)  # for arranging multiple plots
# prepare your data (as before)
cmpl <- mrngo_data_clened_metrics_richness %>%
select(concept, S_hat, word_frequency, aoa_any) %>%
filter(!is.na(S_hat), !is.na(word_frequency), !is.na(aoa_any))
# Plot 1: Richness vs. Word Frequency
p1 <- cmpl %>%
filter(S_hat != max(S_hat, na.rm = TRUE)) %>%
filter(S_hat != max(S_hat, na.rm = TRUE)) %>%
ggplot(aes(x = word_frequency, y = S_hat)) +
geom_point(size = 2, alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "steelblue") +
stat_cor(method = "pearson", label.x = Inf, label.y = Inf,
hjust = 1.1, vjust = 1.5, size = 7) +
labs(
x     = "Word Frequency",
y     = bquote("Semantic richness ("~hat(S)~")"),
title = NULL
) +
custom_theme
# Plot 2: Richness vs. Age-of‐Acquisition
p2 <- cmpl %>%
ggplot(aes(x = aoa_any, y = S_hat)) +
geom_point(size = 2, alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "coral") +
stat_cor(method = "pearson", label.x = Inf, label.y = Inf,
hjust = 1.1, vjust = 1.5, size = 7) +
labs(
x     = "Age of Acquisition (AoA)",
y     = NULL,
title = NULL
) +
custom_theme
# Combine side by side
combined_plot <- p1 + p2 +
plot_layout(ncol = 2) &
theme(
plot.title   = NULL,
axis.text    = element_text(color = "gray30"),
axis.title   = element_text(face = "bold")
) +
custom_theme
# Print it (and you can ggsave at high‐res right after)
print(combined_plot)
print(p1)
print(p2)
ggsave(
filename = "../figures/correlation_freq.png",
plot     = p1,
width    = 9,
height   = 7,
units    = "in",
dpi      = 300
)
ggsave(
filename = "../figures/correlation_aoa.png",
plot     = p2,
width    = 9,
height   = 7,
units    = "in",
dpi      = 300
)
mrngo_data_cleaned %>%
# 1) dedupe feature-responses
# 2) count how many features per (ID, concept)
count(ID, concept, name = "n_features") %>%
# 3) average those counts *within* each ID
group_by(ID) %>%
summarise(avg_response_rate = mean(n_features)) %>%
ungroup()
plot_freq = mrngo_data_cleaned %>%
# 1) dedupe feature-responses
# 2) count how many features per (ID, concept)
count(ID, concept, name = "n_features") %>%
# 3) average those counts *within* each ID
group_by(ID) %>%
summarise(avg_response_rate = mean(n_features)) %>%
ungroup() %>% summarize()
mrngo_data_cleaned %>%
# 1) dedupe feature-responses
# 2) count how many features per (ID, concept)
count(ID, concept, name = "n_features") %>%
# 3) average those counts *within* each ID
group_by(ID) %>%
summarise(avg_response_rate = mean(n_features)) %>%
ungroup() %>% summarize()
mrngo_data_cleaned %>%
# 1) dedupe feature-responses
# 2) count how many features per (ID, concept)
count(ID, concept, name = "n_features") %>%
# 3) average those counts *within* each ID
group_by(ID) %>%
summarise(avg_response_rate = mean(n_features)) %>% summarize()
plot_freq = mrngo_data_cleaned %>%
# 1) dedupe feature-responses
# 2) count how many features per (ID, concept)
count(ID, concept, name = "n_features") %>%
# 3) average those counts *within* each ID
group_by(ID) %>%
summarise(avg_response_rate = mean(n_features)) %>%
ungroup() %>%
# 4) histogram of the per-ID averages
ggplot(aes(x = avg_response_rate)) +
geom_histogram(binwidth = 1, colour = "white", fill = "#ccb3ff" ) +
custom_theme +
labs(x= "Average features produced by participants") +
theme(
axis.title.y = element_blank()
)
# 1) For each ID–concept, count the number of distinct features
id_concept_counts <- mrngo_data_cleaned %>%
distinct(ID, concept, feature) %>%
count(ID, concept, name = "n_features")
# 2) Now for each concept, compute descriptives across all IDs
concept_descriptives <- id_concept_counts %>%
group_by(concept) %>%
summarise(
n_IDs        = n(),                # how many participants named that concept
mean_feats   = mean(n_features),   # average features per participant
median_feats = median(n_features),
sd_feats     = sd(n_features),
min_feats    = min(n_features),
max_feats    = max(n_features)
) %>%
arrange(desc(mean_feats))
print(concept_descriptives)
# 2) Now for each concept, compute descriptives across all IDs
concept_descriptives <- id_concept_counts %>%
group_by(ID) %>%
summarise(
n_IDs        = n(),                # how many participants named that concept
mean_feats   = mean(n_features),   # average features per participant
median_feats = median(n_features),
sd_feats     = sd(n_features),
min_feats    = min(n_features),
max_feats    = max(n_features)
) %>%
arrange(desc(mean_feats))
print(concept_descriptives)
mrngo_data_cleaned %>%
distinct(ID, concept, feature) %>%
count(ID, concept, name = "n_features") %>%
group_by(ID) %>%
summarise(avg_feats = mean(n_features)) %>%
ungroup() %>%
summarise(
n_IDs        = n(),
mean_of_means  = mean(avg_feats),
median_of_means= median(avg_feats),
sd_of_means    = sd(avg_feats),
min_of_means   = min(avg_feats),
max_of_means   = max(avg_feats)
) %>%
print()

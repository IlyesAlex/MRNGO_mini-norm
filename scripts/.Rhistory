knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
library(WordListsAnalytics)
library(udpipe)
library(readr)
library(tidyr)
library(purrr)
library(stringr)
library(writexl)
library(dplyr)
library(hunspell)
model <- udpipe_download_model(language = "hungarian")
ud_model <- udpipe_load_model(file = model$file_model)
path_transcript <- "../rawdata/"
txt_files <- list.files(path = path_transcript,
pattern = "\\.txt$")
## from transcript
df <- tibble(
file = parse_number(txt_files),
text = map_chr(
file.path(path_transcript, txt_files),
~ read_lines(.x) %>%
str_subset("^Gy:") %>%
str_remove("^Gy:") %>%
str_c(collapse = "\n")))
path_preprocessed <- "../preprocessed/"
df <- readxl::read_excel(file.path(path_preprocessed, "MRNGO_preprocessed.xlsx")) %>%
mutate(doc_id  = row_number())
text <- df$response
hunspell("Ez finom vot.", dict = "hu-HU") #check if hungarian dict is installed
list_dictionaries() #check if there's hungarian
cleantext = function(x){
sapply(1:length(x),function(y){
bad = hunspell(x[y], dict = "hu-HU")[[1]]
good = unlist(lapply(hunspell_suggest(bad, dict = "hu-HU"),`[[`,1))
if (length(bad)){
for (i in 1:length(bad)){
x[y] <<- gsub(bad[i],good[i],x[y])
}}})
x
}
correct_text <- cleantext(text)
cleantext(text)
path_preprocessed <- "../preprocessed/"
df <- readxl::read_excel(file.path(path_preprocessed, "MRNGO_preprocessed.xlsx")) %>%
mutate(doc_id  = row_number())
text <- df$response
return
hunspell("Ez finom vot.", dict = "hu-HU") #check if hungarian dict is installed
list_dictionaries() #check if there's hungarian
cleantext = function(x){
sapply(1:length(x),function(y){
bad = hunspell(x[y], dict = "hu-HU")[[1]]
good = unlist(lapply(hunspell_suggest(bad, dict = "hu-HU"),`[[`,1))
if (length(bad)){
for (i in 1:length(bad)){
x[y] <<- gsub(bad[i],good[i],x[y])
}}})
x
}
correct_text <- cleantext(text)
correct_text <- cleantext(text)
correct_text <- cleantext(text)
